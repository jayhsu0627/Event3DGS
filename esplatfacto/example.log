INFO:data.utils.data_loader_split:raw intrinsics_files: 0
INFO:data.utils.data_loader_split:raw pose_files: 0
INFO:data.utils.data_loader_split:raw intrinsics_files: 1001
INFO:data.utils.data_loader_split:raw pose_files: 1001
INFO:data.utils.data_loader_split:raw img_files: 1001
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=78)
           2	LOAD_GLOBAL(arg=0, lineno=80)
           4	LOAD_GLOBAL(arg=1, lineno=80)
           6	LOAD_FAST(arg=0, lineno=80)
           8	CALL_FUNCTION(arg=1, lineno=80)
          10	CALL_FUNCTION(arg=1, lineno=80)
          12	GET_ITER(arg=None, lineno=80)
>         14	FOR_ITER(arg=72, lineno=80)
          16	STORE_FAST(arg=7, lineno=80)
          18	LOAD_FAST(arg=0, lineno=81)
          20	LOAD_FAST(arg=7, lineno=81)
          22	BINARY_SUBSCR(arg=None, lineno=81)
          24	LOAD_FAST(arg=1, lineno=81)
          26	LOAD_FAST(arg=7, lineno=81)
          28	BINARY_SUBSCR(arg=None, lineno=81)
          30	LOAD_FAST(arg=2, lineno=81)
          32	LOAD_FAST(arg=7, lineno=81)
          34	BINARY_SUBSCR(arg=None, lineno=81)
          36	LOAD_FAST(arg=3, lineno=81)
          38	LOAD_FAST(arg=7, lineno=81)
          40	BINARY_SUBSCR(arg=None, lineno=81)
          42	BUILD_TUPLE(arg=4, lineno=81)
          44	UNPACK_SEQUENCE(arg=4, lineno=81)
          46	STORE_FAST(arg=8, lineno=81)
          48	STORE_FAST(arg=9, lineno=81)
          50	STORE_FAST(arg=10, lineno=81)
          52	STORE_FAST(arg=11, lineno=81)
          54	LOAD_FAST(arg=4, lineno=82)
          56	LOAD_FAST(arg=9, lineno=82)
          58	LOAD_FAST(arg=5, lineno=82)
          60	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          62	LOAD_FAST(arg=8, lineno=82)
          64	LOAD_FAST(arg=5, lineno=82)
          66	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          68	BUILD_TUPLE(arg=2, lineno=82)
          70	DUP_TOP_TWO(arg=None, lineno=82)
          72	BINARY_SUBSCR(arg=None, lineno=82)
          74	LOAD_FAST(arg=11, lineno=82)
          76	LOAD_FAST(arg=6, lineno=82)
          78	BINARY_ADD(arg=None, lineno=82)
          80	INPLACE_ADD(arg=None, lineno=82)
          82	ROT_THREE(arg=None, lineno=82)
          84	STORE_SUBSCR(arg=None, lineno=82)
          86	JUMP_ABSOLUTE(arg=14, lineno=82)
>         88	LOAD_CONST(arg=0, lineno=82)
          90	RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$xs6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=80)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=72, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=88 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=0, lineno=82)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$const88.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=16 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=7, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5', '$i26.6']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8', '$i32.9']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11', '$i38.12']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BUILD_TUPLE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=UNPACK_SEQUENCE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$42build_tuple.14']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=8, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16', '$44unpack_sequence.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=9, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=10, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=11, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21', '$resolution_level58.22']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=8, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24', '$resolution_level64.25']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=2, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$66binary_floor_divide.26']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=DUP_TOP_TWO(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$70dup_top_two.28', '$70dup_top_two.29']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=11, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31', '$polarity_offset76.32']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=INPLACE_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$78binary_add.33']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=ROT_THREE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$80inplace_add.34']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$80inplace_add.34', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=JUMP_ABSOLUTE(arg=14, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$xs6.2'}), (8, {'func': '$4load_global.1', 'args': ['$xs6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$xs18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$xs18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$ys24.5'}), (26, {'res': '$i26.6'}), (28, {'index': '$i26.6', 'target': '$ys24.5', 'res': '$28binary_subscr.7'}), (30, {'res': '$ts30.8'}), (32, {'res': '$i32.9'}), (34, {'index': '$i32.9', 'target': '$ts30.8', 'res': '$34binary_subscr.10'}), (36, {'res': '$ps36.11'}), (38, {'res': '$i38.12'}), (40, {'index': '$i38.12', 'target': '$ps36.11', 'res': '$40binary_subscr.13'}), (42, {'items': ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13'], 'res': '$42build_tuple.14'}), (44, {'iterable': '$42build_tuple.14', 'stores': ['$44unpack_sequence.15', '$44unpack_sequence.16', '$44unpack_sequence.17', '$44unpack_sequence.18'], 'tupleobj': '$44unpack_sequence.19'}), (46, {'value': '$44unpack_sequence.15'}), (48, {'value': '$44unpack_sequence.16'}), (50, {'value': '$44unpack_sequence.17'}), (52, {'value': '$44unpack_sequence.18'}), (54, {'res': '$out54.20'}), (56, {'res': '$y56.21'}), (58, {'res': '$resolution_level58.22'}), (60, {'lhs': '$y56.21', 'rhs': '$resolution_level58.22', 'res': '$60binary_floor_divide.23'}), (62, {'res': '$x62.24'}), (64, {'res': '$resolution_level64.25'}), (66, {'lhs': '$x62.24', 'rhs': '$resolution_level64.25', 'res': '$66binary_floor_divide.26'}), (68, {'items': ['$60binary_floor_divide.23', '$66binary_floor_divide.26'], 'res': '$68build_tuple.27'}), (70, {'orig': ['$out54.20', '$68build_tuple.27'], 'duped': ['$70dup_top_two.28', '$70dup_top_two.29']}), (72, {'index': '$70dup_top_two.29', 'target': '$70dup_top_two.28', 'res': '$72binary_subscr.30'}), (74, {'res': '$p74.31'}), (76, {'res': '$polarity_offset76.32'}), (78, {'lhs': '$p74.31', 'rhs': '$polarity_offset76.32', 'res': '$78binary_add.33'}), (80, {'lhs': '$72binary_subscr.30', 'rhs': '$78binary_add.33', 'res': '$80inplace_add.34'}), (84, {'target': '$out54.20', 'index': '$68build_tuple.27', 'value': '$80inplace_add.34'}), (86, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$const88.0'}), (90, {'retval': '$const88.0', 'castval': '$90return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    xs = arg(0, name=xs)                     ['xs']
    ys = arg(1, name=ys)                     ['ys']
    ts = arg(2, name=ts)                     ['ts']
    ps = arg(3, name=ps)                     ['ps']
    out = arg(4, name=out)                   ['out']
    resolution_level = arg(5, name=resolution_level) ['resolution_level']
    polarity_offset = arg(6, name=polarity_offset) ['polarity_offset']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'xs']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 88             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'xs']
    $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>) ['$28binary_subscr.7', 'i', 'ys']
    $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>) ['$34binary_subscr.10', 'i', 'ts']
    $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>) ['$40binary_subscr.13', 'i', 'ps']
    $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)]) ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13', '$42build_tuple.14']
    $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4) ['$42build_tuple.14', '$44unpack_sequence.19']
    $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.15', '$44unpack_sequence.19']
    $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.16', '$44unpack_sequence.19']
    $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.17', '$44unpack_sequence.19']
    $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.18', '$44unpack_sequence.19']
    x = $44unpack_sequence.15                ['$44unpack_sequence.15', 'x']
    y = $44unpack_sequence.16                ['$44unpack_sequence.16', 'y']
    t = $44unpack_sequence.17                ['$44unpack_sequence.17', 't']
    p = $44unpack_sequence.18                ['$44unpack_sequence.18', 'p']
    $60binary_floor_divide.23 = y // resolution_level ['$60binary_floor_divide.23', 'resolution_level', 'y']
    $66binary_floor_divide.26 = x // resolution_level ['$66binary_floor_divide.26', 'resolution_level', 'x']
    $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)]) ['$60binary_floor_divide.23', '$66binary_floor_divide.26', '$68build_tuple.27']
    $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>) ['$68build_tuple.27', '$72binary_subscr.30', 'out']
    $78binary_add.33 = p + polarity_offset   ['$78binary_add.33', 'p', 'polarity_offset']
    $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined) ['$72binary_subscr.30', '$78binary_add.33', '$80inplace_add.34']
    out[$68build_tuple.27] = $80inplace_add.34 ['$68build_tuple.27', '$80inplace_add.34', 'out']
    jump 14                                  []
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001CA7228BE50>
DEBUG:numba.core.ssa:on stmt: xs = arg(0, name=xs)
DEBUG:numba.core.ssa:on stmt: ys = arg(1, name=ys)
DEBUG:numba.core.ssa:on stmt: ts = arg(2, name=ts)
DEBUG:numba.core.ssa:on stmt: ps = arg(3, name=ps)
DEBUG:numba.core.ssa:on stmt: out = arg(4, name=out)
DEBUG:numba.core.ssa:on stmt: resolution_level = arg(5, name=resolution_level)
DEBUG:numba.core.ssa:on stmt: polarity_offset = arg(6, name=polarity_offset)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001CA7228BE50>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 88
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001CA7228BE50>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)])
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: x = $44unpack_sequence.15
DEBUG:numba.core.ssa:on stmt: y = $44unpack_sequence.16
DEBUG:numba.core.ssa:on stmt: t = $44unpack_sequence.17
DEBUG:numba.core.ssa:on stmt: p = $44unpack_sequence.18
DEBUG:numba.core.ssa:on stmt: $60binary_floor_divide.23 = y // resolution_level
DEBUG:numba.core.ssa:on stmt: $66binary_floor_divide.26 = x // resolution_level
DEBUG:numba.core.ssa:on stmt: $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)])
DEBUG:numba.core.ssa:on stmt: $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $78binary_add.33 = p + polarity_offset
DEBUG:numba.core.ssa:on stmt: $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: out[$68build_tuple.27] = $80inplace_add.34
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 88
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001CA7228BE50>
DEBUG:numba.core.ssa:on stmt: $const88.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $90return_value.1 = cast(value=$const88.0)
DEBUG:numba.core.ssa:on stmt: return $90return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001CA722A0EB0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001CA722A0FD0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001CA722CA340>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001CA722CA460>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001CA722CA580>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001CA722CAC40>,
                                     16)],
             '$28binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001CA722D0040>,
                                     16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001CA722A00D0>,
                                  0)],
             '$34binary_subscr.10': [(<numba.core.ir.Assign object at 0x000001CA722D0400>,
                                      16)],
             '$40binary_subscr.13': [(<numba.core.ir.Assign object at 0x000001CA722D07C0>,
                                      16)],
             '$42build_tuple.14': [(<numba.core.ir.Assign object at 0x000001CA722D0940>,
                                    16)],
             '$44unpack_sequence.15': [(<numba.core.ir.Assign object at 0x000001CA722D0C10>,
                                        16)],
             '$44unpack_sequence.16': [(<numba.core.ir.Assign object at 0x000001CA722D0D30>,
                                        16)],
             '$44unpack_sequence.17': [(<numba.core.ir.Assign object at 0x000001CA722D0E50>,
                                        16)],
             '$44unpack_sequence.18': [(<numba.core.ir.Assign object at 0x000001CA722D0F70>,
                                        16)],
             '$44unpack_sequence.19': [(<numba.core.ir.Assign object at 0x000001CA722D0AC0>,
                                        16)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001CA722A0A30>,
                                  0)],
             '$60binary_floor_divide.23': [(<numba.core.ir.Assign object at 0x000001CA722D28E0>,
                                            16)],
             '$66binary_floor_divide.26': [(<numba.core.ir.Assign object at 0x000001CA722D2CA0>,
                                            16)],
             '$68build_tuple.27': [(<numba.core.ir.Assign object at 0x000001CA722D2E20>,
                                    16)],
             '$72binary_subscr.30': [(<numba.core.ir.Assign object at 0x000001CA722D51C0>,
                                      16)],
             '$78binary_add.33': [(<numba.core.ir.Assign object at 0x000001CA722D5580>,
                                   16)],
             '$80inplace_add.34': [(<numba.core.ir.Assign object at 0x000001CA722D5700>,
                                    16)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001CA722A0D30>,
                                    0)],
             '$90return_value.1': [(<numba.core.ir.Assign object at 0x000001CA722CA7C0>,
                                    88)],
             '$const88.0': [(<numba.core.ir.Assign object at 0x000001CA722D2730>,
                             88)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001CA722A0BE0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001CA722CA280>,
                           14)],
             'i': [(<numba.core.ir.Assign object at 0x000001CA722CA850>, 16)],
             'out': [(<numba.core.ir.Assign object at 0x000001CA722A0850>, 0)],
             'p': [(<numba.core.ir.Assign object at 0x000001CA722D23D0>, 16)],
             'polarity_offset': [(<numba.core.ir.Assign object at 0x000001CA722A03D0>,
                                  0)],
             'ps': [(<numba.core.ir.Assign object at 0x000001CA722998B0>, 0)],
             'resolution_level': [(<numba.core.ir.Assign object at 0x000001CA722A0610>,
                                   0)],
             't': [(<numba.core.ir.Assign object at 0x000001CA722D22B0>, 16)],
             'ts': [(<numba.core.ir.Assign object at 0x000001CA72299DF0>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x000001CA722D2070>, 16)],
             'xs': [(<numba.core.ir.Assign object at 0x000001CA72299610>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000001CA722D2190>, 16)],
             'ys': [(<numba.core.ir.Assign object at 0x000001CA72299D60>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x000001CA7228BE50>
INFO:data.utils.data_loader_split:Split train, # views: 1001, # effective views: 999
INFO:data.utils.data_loader_split:raw intrinsics_files: 1001
INFO:data.utils.data_loader_split:raw pose_files: 1001
INFO:data.utils.data_loader_split:raw img_files: 1001
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=78)
           2	LOAD_GLOBAL(arg=0, lineno=80)
           4	LOAD_GLOBAL(arg=1, lineno=80)
           6	LOAD_FAST(arg=0, lineno=80)
           8	CALL_FUNCTION(arg=1, lineno=80)
          10	CALL_FUNCTION(arg=1, lineno=80)
          12	GET_ITER(arg=None, lineno=80)
>         14	FOR_ITER(arg=72, lineno=80)
          16	STORE_FAST(arg=7, lineno=80)
          18	LOAD_FAST(arg=0, lineno=81)
          20	LOAD_FAST(arg=7, lineno=81)
          22	BINARY_SUBSCR(arg=None, lineno=81)
          24	LOAD_FAST(arg=1, lineno=81)
          26	LOAD_FAST(arg=7, lineno=81)
          28	BINARY_SUBSCR(arg=None, lineno=81)
          30	LOAD_FAST(arg=2, lineno=81)
          32	LOAD_FAST(arg=7, lineno=81)
          34	BINARY_SUBSCR(arg=None, lineno=81)
          36	LOAD_FAST(arg=3, lineno=81)
          38	LOAD_FAST(arg=7, lineno=81)
          40	BINARY_SUBSCR(arg=None, lineno=81)
          42	BUILD_TUPLE(arg=4, lineno=81)
          44	UNPACK_SEQUENCE(arg=4, lineno=81)
          46	STORE_FAST(arg=8, lineno=81)
          48	STORE_FAST(arg=9, lineno=81)
          50	STORE_FAST(arg=10, lineno=81)
          52	STORE_FAST(arg=11, lineno=81)
          54	LOAD_FAST(arg=4, lineno=82)
          56	LOAD_FAST(arg=9, lineno=82)
          58	LOAD_FAST(arg=5, lineno=82)
          60	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          62	LOAD_FAST(arg=8, lineno=82)
          64	LOAD_FAST(arg=5, lineno=82)
          66	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          68	BUILD_TUPLE(arg=2, lineno=82)
          70	DUP_TOP_TWO(arg=None, lineno=82)
          72	BINARY_SUBSCR(arg=None, lineno=82)
          74	LOAD_FAST(arg=11, lineno=82)
          76	LOAD_FAST(arg=6, lineno=82)
          78	BINARY_ADD(arg=None, lineno=82)
          80	INPLACE_ADD(arg=None, lineno=82)
          82	ROT_THREE(arg=None, lineno=82)
          84	STORE_SUBSCR(arg=None, lineno=82)
          86	JUMP_ABSOLUTE(arg=14, lineno=82)
>         88	LOAD_CONST(arg=0, lineno=82)
          90	RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$xs6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=80)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=72, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=88 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=0, lineno=82)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$const88.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=16 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=7, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5', '$i26.6']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8', '$i32.9']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11', '$i38.12']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BUILD_TUPLE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=UNPACK_SEQUENCE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$42build_tuple.14']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=8, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16', '$44unpack_sequence.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=9, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=10, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=11, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21', '$resolution_level58.22']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=8, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24', '$resolution_level64.25']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=2, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$66binary_floor_divide.26']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=DUP_TOP_TWO(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$70dup_top_two.28', '$70dup_top_two.29']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=11, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31', '$polarity_offset76.32']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=INPLACE_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$78binary_add.33']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=ROT_THREE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$80inplace_add.34']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$80inplace_add.34', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=JUMP_ABSOLUTE(arg=14, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$xs6.2'}), (8, {'func': '$4load_global.1', 'args': ['$xs6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$xs18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$xs18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$ys24.5'}), (26, {'res': '$i26.6'}), (28, {'index': '$i26.6', 'target': '$ys24.5', 'res': '$28binary_subscr.7'}), (30, {'res': '$ts30.8'}), (32, {'res': '$i32.9'}), (34, {'index': '$i32.9', 'target': '$ts30.8', 'res': '$34binary_subscr.10'}), (36, {'res': '$ps36.11'}), (38, {'res': '$i38.12'}), (40, {'index': '$i38.12', 'target': '$ps36.11', 'res': '$40binary_subscr.13'}), (42, {'items': ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13'], 'res': '$42build_tuple.14'}), (44, {'iterable': '$42build_tuple.14', 'stores': ['$44unpack_sequence.15', '$44unpack_sequence.16', '$44unpack_sequence.17', '$44unpack_sequence.18'], 'tupleobj': '$44unpack_sequence.19'}), (46, {'value': '$44unpack_sequence.15'}), (48, {'value': '$44unpack_sequence.16'}), (50, {'value': '$44unpack_sequence.17'}), (52, {'value': '$44unpack_sequence.18'}), (54, {'res': '$out54.20'}), (56, {'res': '$y56.21'}), (58, {'res': '$resolution_level58.22'}), (60, {'lhs': '$y56.21', 'rhs': '$resolution_level58.22', 'res': '$60binary_floor_divide.23'}), (62, {'res': '$x62.24'}), (64, {'res': '$resolution_level64.25'}), (66, {'lhs': '$x62.24', 'rhs': '$resolution_level64.25', 'res': '$66binary_floor_divide.26'}), (68, {'items': ['$60binary_floor_divide.23', '$66binary_floor_divide.26'], 'res': '$68build_tuple.27'}), (70, {'orig': ['$out54.20', '$68build_tuple.27'], 'duped': ['$70dup_top_two.28', '$70dup_top_two.29']}), (72, {'index': '$70dup_top_two.29', 'target': '$70dup_top_two.28', 'res': '$72binary_subscr.30'}), (74, {'res': '$p74.31'}), (76, {'res': '$polarity_offset76.32'}), (78, {'lhs': '$p74.31', 'rhs': '$polarity_offset76.32', 'res': '$78binary_add.33'}), (80, {'lhs': '$72binary_subscr.30', 'rhs': '$78binary_add.33', 'res': '$80inplace_add.34'}), (84, {'target': '$out54.20', 'index': '$68build_tuple.27', 'value': '$80inplace_add.34'}), (86, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$const88.0'}), (90, {'retval': '$const88.0', 'castval': '$90return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    xs = arg(0, name=xs)                     ['xs']
    ys = arg(1, name=ys)                     ['ys']
    ts = arg(2, name=ts)                     ['ts']
    ps = arg(3, name=ps)                     ['ps']
    out = arg(4, name=out)                   ['out']
    resolution_level = arg(5, name=resolution_level) ['resolution_level']
    polarity_offset = arg(6, name=polarity_offset) ['polarity_offset']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'xs']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 88             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'xs']
    $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>) ['$28binary_subscr.7', 'i', 'ys']
    $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>) ['$34binary_subscr.10', 'i', 'ts']
    $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>) ['$40binary_subscr.13', 'i', 'ps']
    $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)]) ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13', '$42build_tuple.14']
    $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4) ['$42build_tuple.14', '$44unpack_sequence.19']
    $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.15', '$44unpack_sequence.19']
    $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.16', '$44unpack_sequence.19']
    $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.17', '$44unpack_sequence.19']
    $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.18', '$44unpack_sequence.19']
    x = $44unpack_sequence.15                ['$44unpack_sequence.15', 'x']
    y = $44unpack_sequence.16                ['$44unpack_sequence.16', 'y']
    t = $44unpack_sequence.17                ['$44unpack_sequence.17', 't']
    p = $44unpack_sequence.18                ['$44unpack_sequence.18', 'p']
    $60binary_floor_divide.23 = y // resolution_level ['$60binary_floor_divide.23', 'resolution_level', 'y']
    $66binary_floor_divide.26 = x // resolution_level ['$66binary_floor_divide.26', 'resolution_level', 'x']
    $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)]) ['$60binary_floor_divide.23', '$66binary_floor_divide.26', '$68build_tuple.27']
    $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>) ['$68build_tuple.27', '$72binary_subscr.30', 'out']
    $78binary_add.33 = p + polarity_offset   ['$78binary_add.33', 'p', 'polarity_offset']
    $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined) ['$72binary_subscr.30', '$78binary_add.33', '$80inplace_add.34']
    out[$68build_tuple.27] = $80inplace_add.34 ['$68build_tuple.27', '$80inplace_add.34', 'out']
    jump 14                                  []
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F81F05BFD0>
DEBUG:numba.core.ssa:on stmt: xs = arg(0, name=xs)
DEBUG:numba.core.ssa:on stmt: ys = arg(1, name=ys)
DEBUG:numba.core.ssa:on stmt: ts = arg(2, name=ts)
DEBUG:numba.core.ssa:on stmt: ps = arg(3, name=ps)
DEBUG:numba.core.ssa:on stmt: out = arg(4, name=out)
DEBUG:numba.core.ssa:on stmt: resolution_level = arg(5, name=resolution_level)
DEBUG:numba.core.ssa:on stmt: polarity_offset = arg(6, name=polarity_offset)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F81F05BFD0>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 88
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F81F05BFD0>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)])
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: x = $44unpack_sequence.15
DEBUG:numba.core.ssa:on stmt: y = $44unpack_sequence.16
DEBUG:numba.core.ssa:on stmt: t = $44unpack_sequence.17
DEBUG:numba.core.ssa:on stmt: p = $44unpack_sequence.18
DEBUG:numba.core.ssa:on stmt: $60binary_floor_divide.23 = y // resolution_level
DEBUG:numba.core.ssa:on stmt: $66binary_floor_divide.26 = x // resolution_level
DEBUG:numba.core.ssa:on stmt: $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)])
DEBUG:numba.core.ssa:on stmt: $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $78binary_add.33 = p + polarity_offset
DEBUG:numba.core.ssa:on stmt: $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: out[$68build_tuple.27] = $80inplace_add.34
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 88
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001F81F05BFD0>
DEBUG:numba.core.ssa:on stmt: $const88.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $90return_value.1 = cast(value=$const88.0)
DEBUG:numba.core.ssa:on stmt: return $90return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001F81F070F10>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001F81F09B070>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001F81F09B3A0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001F81F09B4C0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001F81F09B5E0>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001F81F09BCA0>,
                                     16)],
             '$28binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001F81F0A00A0>,
                                     16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001F81F070070>,
                                  0)],
             '$34binary_subscr.10': [(<numba.core.ir.Assign object at 0x000001F81F0A0460>,
                                      16)],
             '$40binary_subscr.13': [(<numba.core.ir.Assign object at 0x000001F81F0A0820>,
                                      16)],
             '$42build_tuple.14': [(<numba.core.ir.Assign object at 0x000001F81F0A09A0>,
                                    16)],
             '$44unpack_sequence.15': [(<numba.core.ir.Assign object at 0x000001F81F0A0C70>,
                                        16)],
             '$44unpack_sequence.16': [(<numba.core.ir.Assign object at 0x000001F81F0A0D90>,
                                        16)],
             '$44unpack_sequence.17': [(<numba.core.ir.Assign object at 0x000001F81F0A0EB0>,
                                        16)],
             '$44unpack_sequence.18': [(<numba.core.ir.Assign object at 0x000001F81F0A0FD0>,
                                        16)],
             '$44unpack_sequence.19': [(<numba.core.ir.Assign object at 0x000001F81F0A0B20>,
                                        16)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001F81F070A90>,
                                  0)],
             '$60binary_floor_divide.23': [(<numba.core.ir.Assign object at 0x000001F81F0A2940>,
                                            16)],
             '$66binary_floor_divide.26': [(<numba.core.ir.Assign object at 0x000001F81F0A2D00>,
                                            16)],
             '$68build_tuple.27': [(<numba.core.ir.Assign object at 0x000001F81F0A2E80>,
                                    16)],
             '$72binary_subscr.30': [(<numba.core.ir.Assign object at 0x000001F81F0A5220>,
                                      16)],
             '$78binary_add.33': [(<numba.core.ir.Assign object at 0x000001F81F0A55E0>,
                                   16)],
             '$80inplace_add.34': [(<numba.core.ir.Assign object at 0x000001F81F0A5760>,
                                    16)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001F81F070D90>,
                                    0)],
             '$90return_value.1': [(<numba.core.ir.Assign object at 0x000001F81F09B820>,
                                    88)],
             '$const88.0': [(<numba.core.ir.Assign object at 0x000001F81F0A2790>,
                             88)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001F81F070C40>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001F81F09B2E0>,
                           14)],
             'i': [(<numba.core.ir.Assign object at 0x000001F81F09B8B0>, 16)],
             'out': [(<numba.core.ir.Assign object at 0x000001F81F0707F0>, 0)],
             'p': [(<numba.core.ir.Assign object at 0x000001F81F0A2430>, 16)],
             'polarity_offset': [(<numba.core.ir.Assign object at 0x000001F81F070370>,
                                  0)],
             'ps': [(<numba.core.ir.Assign object at 0x000001F81F069BE0>, 0)],
             'resolution_level': [(<numba.core.ir.Assign object at 0x000001F81F0705B0>,
                                   0)],
             't': [(<numba.core.ir.Assign object at 0x000001F81F0A2310>, 16)],
             'ts': [(<numba.core.ir.Assign object at 0x000001F81F069A30>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x000001F81F0A20D0>, 16)],
             'xs': [(<numba.core.ir.Assign object at 0x000001F81F0696D0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000001F81F0A21F0>, 16)],
             'ys': [(<numba.core.ir.Assign object at 0x000001F81F069D90>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x000001F81F0E8DC0>
INFO:data.utils.data_loader_split:Split train, # views: 1001, # effective views: 999
INFO:data.utils.data_loader_split:raw intrinsics_files: 1001
INFO:data.utils.data_loader_split:raw pose_files: 1001
INFO:data.utils.data_loader_split:raw img_files: 1001
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=78)
           2	LOAD_GLOBAL(arg=0, lineno=80)
           4	LOAD_GLOBAL(arg=1, lineno=80)
           6	LOAD_FAST(arg=0, lineno=80)
           8	CALL_FUNCTION(arg=1, lineno=80)
          10	CALL_FUNCTION(arg=1, lineno=80)
          12	GET_ITER(arg=None, lineno=80)
>         14	FOR_ITER(arg=72, lineno=80)
          16	STORE_FAST(arg=7, lineno=80)
          18	LOAD_FAST(arg=0, lineno=81)
          20	LOAD_FAST(arg=7, lineno=81)
          22	BINARY_SUBSCR(arg=None, lineno=81)
          24	LOAD_FAST(arg=1, lineno=81)
          26	LOAD_FAST(arg=7, lineno=81)
          28	BINARY_SUBSCR(arg=None, lineno=81)
          30	LOAD_FAST(arg=2, lineno=81)
          32	LOAD_FAST(arg=7, lineno=81)
          34	BINARY_SUBSCR(arg=None, lineno=81)
          36	LOAD_FAST(arg=3, lineno=81)
          38	LOAD_FAST(arg=7, lineno=81)
          40	BINARY_SUBSCR(arg=None, lineno=81)
          42	BUILD_TUPLE(arg=4, lineno=81)
          44	UNPACK_SEQUENCE(arg=4, lineno=81)
          46	STORE_FAST(arg=8, lineno=81)
          48	STORE_FAST(arg=9, lineno=81)
          50	STORE_FAST(arg=10, lineno=81)
          52	STORE_FAST(arg=11, lineno=81)
          54	LOAD_FAST(arg=4, lineno=82)
          56	LOAD_FAST(arg=9, lineno=82)
          58	LOAD_FAST(arg=5, lineno=82)
          60	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          62	LOAD_FAST(arg=8, lineno=82)
          64	LOAD_FAST(arg=5, lineno=82)
          66	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          68	BUILD_TUPLE(arg=2, lineno=82)
          70	DUP_TOP_TWO(arg=None, lineno=82)
          72	BINARY_SUBSCR(arg=None, lineno=82)
          74	LOAD_FAST(arg=11, lineno=82)
          76	LOAD_FAST(arg=6, lineno=82)
          78	BINARY_ADD(arg=None, lineno=82)
          80	INPLACE_ADD(arg=None, lineno=82)
          82	ROT_THREE(arg=None, lineno=82)
          84	STORE_SUBSCR(arg=None, lineno=82)
          86	JUMP_ABSOLUTE(arg=14, lineno=82)
>         88	LOAD_CONST(arg=0, lineno=82)
          90	RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$xs6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=80)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=72, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=88 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=0, lineno=82)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$const88.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=16 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=7, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5', '$i26.6']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8', '$i32.9']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11', '$i38.12']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BUILD_TUPLE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=UNPACK_SEQUENCE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$42build_tuple.14']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=8, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16', '$44unpack_sequence.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=9, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=10, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=11, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21', '$resolution_level58.22']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=8, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24', '$resolution_level64.25']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=2, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$66binary_floor_divide.26']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=DUP_TOP_TWO(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$70dup_top_two.28', '$70dup_top_two.29']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=11, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31', '$polarity_offset76.32']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=INPLACE_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$78binary_add.33']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=ROT_THREE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$80inplace_add.34']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$80inplace_add.34', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=JUMP_ABSOLUTE(arg=14, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$xs6.2'}), (8, {'func': '$4load_global.1', 'args': ['$xs6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$xs18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$xs18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$ys24.5'}), (26, {'res': '$i26.6'}), (28, {'index': '$i26.6', 'target': '$ys24.5', 'res': '$28binary_subscr.7'}), (30, {'res': '$ts30.8'}), (32, {'res': '$i32.9'}), (34, {'index': '$i32.9', 'target': '$ts30.8', 'res': '$34binary_subscr.10'}), (36, {'res': '$ps36.11'}), (38, {'res': '$i38.12'}), (40, {'index': '$i38.12', 'target': '$ps36.11', 'res': '$40binary_subscr.13'}), (42, {'items': ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13'], 'res': '$42build_tuple.14'}), (44, {'iterable': '$42build_tuple.14', 'stores': ['$44unpack_sequence.15', '$44unpack_sequence.16', '$44unpack_sequence.17', '$44unpack_sequence.18'], 'tupleobj': '$44unpack_sequence.19'}), (46, {'value': '$44unpack_sequence.15'}), (48, {'value': '$44unpack_sequence.16'}), (50, {'value': '$44unpack_sequence.17'}), (52, {'value': '$44unpack_sequence.18'}), (54, {'res': '$out54.20'}), (56, {'res': '$y56.21'}), (58, {'res': '$resolution_level58.22'}), (60, {'lhs': '$y56.21', 'rhs': '$resolution_level58.22', 'res': '$60binary_floor_divide.23'}), (62, {'res': '$x62.24'}), (64, {'res': '$resolution_level64.25'}), (66, {'lhs': '$x62.24', 'rhs': '$resolution_level64.25', 'res': '$66binary_floor_divide.26'}), (68, {'items': ['$60binary_floor_divide.23', '$66binary_floor_divide.26'], 'res': '$68build_tuple.27'}), (70, {'orig': ['$out54.20', '$68build_tuple.27'], 'duped': ['$70dup_top_two.28', '$70dup_top_two.29']}), (72, {'index': '$70dup_top_two.29', 'target': '$70dup_top_two.28', 'res': '$72binary_subscr.30'}), (74, {'res': '$p74.31'}), (76, {'res': '$polarity_offset76.32'}), (78, {'lhs': '$p74.31', 'rhs': '$polarity_offset76.32', 'res': '$78binary_add.33'}), (80, {'lhs': '$72binary_subscr.30', 'rhs': '$78binary_add.33', 'res': '$80inplace_add.34'}), (84, {'target': '$out54.20', 'index': '$68build_tuple.27', 'value': '$80inplace_add.34'}), (86, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$const88.0'}), (90, {'retval': '$const88.0', 'castval': '$90return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    xs = arg(0, name=xs)                     ['xs']
    ys = arg(1, name=ys)                     ['ys']
    ts = arg(2, name=ts)                     ['ts']
    ps = arg(3, name=ps)                     ['ps']
    out = arg(4, name=out)                   ['out']
    resolution_level = arg(5, name=resolution_level) ['resolution_level']
    polarity_offset = arg(6, name=polarity_offset) ['polarity_offset']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'xs']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 88             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'xs']
    $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>) ['$28binary_subscr.7', 'i', 'ys']
    $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>) ['$34binary_subscr.10', 'i', 'ts']
    $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>) ['$40binary_subscr.13', 'i', 'ps']
    $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)]) ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13', '$42build_tuple.14']
    $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4) ['$42build_tuple.14', '$44unpack_sequence.19']
    $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.15', '$44unpack_sequence.19']
    $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.16', '$44unpack_sequence.19']
    $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.17', '$44unpack_sequence.19']
    $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.18', '$44unpack_sequence.19']
    x = $44unpack_sequence.15                ['$44unpack_sequence.15', 'x']
    y = $44unpack_sequence.16                ['$44unpack_sequence.16', 'y']
    t = $44unpack_sequence.17                ['$44unpack_sequence.17', 't']
    p = $44unpack_sequence.18                ['$44unpack_sequence.18', 'p']
    $60binary_floor_divide.23 = y // resolution_level ['$60binary_floor_divide.23', 'resolution_level', 'y']
    $66binary_floor_divide.26 = x // resolution_level ['$66binary_floor_divide.26', 'resolution_level', 'x']
    $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)]) ['$60binary_floor_divide.23', '$66binary_floor_divide.26', '$68build_tuple.27']
    $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>) ['$68build_tuple.27', '$72binary_subscr.30', 'out']
    $78binary_add.33 = p + polarity_offset   ['$78binary_add.33', 'p', 'polarity_offset']
    $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined) ['$72binary_subscr.30', '$78binary_add.33', '$80inplace_add.34']
    out[$68build_tuple.27] = $80inplace_add.34 ['$68build_tuple.27', '$80inplace_add.34', 'out']
    jump 14                                  []
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E3C3ECCE50>
DEBUG:numba.core.ssa:on stmt: xs = arg(0, name=xs)
DEBUG:numba.core.ssa:on stmt: ys = arg(1, name=ys)
DEBUG:numba.core.ssa:on stmt: ts = arg(2, name=ts)
DEBUG:numba.core.ssa:on stmt: ps = arg(3, name=ps)
DEBUG:numba.core.ssa:on stmt: out = arg(4, name=out)
DEBUG:numba.core.ssa:on stmt: resolution_level = arg(5, name=resolution_level)
DEBUG:numba.core.ssa:on stmt: polarity_offset = arg(6, name=polarity_offset)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E3C3ECCE50>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 88
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E3C3ECCE50>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)])
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: x = $44unpack_sequence.15
DEBUG:numba.core.ssa:on stmt: y = $44unpack_sequence.16
DEBUG:numba.core.ssa:on stmt: t = $44unpack_sequence.17
DEBUG:numba.core.ssa:on stmt: p = $44unpack_sequence.18
DEBUG:numba.core.ssa:on stmt: $60binary_floor_divide.23 = y // resolution_level
DEBUG:numba.core.ssa:on stmt: $66binary_floor_divide.26 = x // resolution_level
DEBUG:numba.core.ssa:on stmt: $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)])
DEBUG:numba.core.ssa:on stmt: $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $78binary_add.33 = p + polarity_offset
DEBUG:numba.core.ssa:on stmt: $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: out[$68build_tuple.27] = $80inplace_add.34
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 88
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E3C3ECCE50>
DEBUG:numba.core.ssa:on stmt: $const88.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $90return_value.1 = cast(value=$const88.0)
DEBUG:numba.core.ssa:on stmt: return $90return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001E3C3EE0F40>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001E3C3F0B0A0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001E3C3F0B3D0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001E3C3F0B4F0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001E3C3F0B610>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001E3C3F0BCD0>,
                                     16)],
             '$28binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001E3C3F100D0>,
                                     16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001E3C3EE0040>,
                                  0)],
             '$34binary_subscr.10': [(<numba.core.ir.Assign object at 0x000001E3C3F10490>,
                                      16)],
             '$40binary_subscr.13': [(<numba.core.ir.Assign object at 0x000001E3C3F10850>,
                                      16)],
             '$42build_tuple.14': [(<numba.core.ir.Assign object at 0x000001E3C3F109D0>,
                                    16)],
             '$44unpack_sequence.15': [(<numba.core.ir.Assign object at 0x000001E3C3F10CA0>,
                                        16)],
             '$44unpack_sequence.16': [(<numba.core.ir.Assign object at 0x000001E3C3F10DC0>,
                                        16)],
             '$44unpack_sequence.17': [(<numba.core.ir.Assign object at 0x000001E3C3F10EE0>,
                                        16)],
             '$44unpack_sequence.18': [(<numba.core.ir.Assign object at 0x000001E3C3F12040>,
                                        16)],
             '$44unpack_sequence.19': [(<numba.core.ir.Assign object at 0x000001E3C3F10B50>,
                                        16)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001E3C3EE0AC0>,
                                  0)],
             '$60binary_floor_divide.23': [(<numba.core.ir.Assign object at 0x000001E3C3F12970>,
                                            16)],
             '$66binary_floor_divide.26': [(<numba.core.ir.Assign object at 0x000001E3C3F12D30>,
                                            16)],
             '$68build_tuple.27': [(<numba.core.ir.Assign object at 0x000001E3C3F12EB0>,
                                    16)],
             '$72binary_subscr.30': [(<numba.core.ir.Assign object at 0x000001E3C3F15250>,
                                      16)],
             '$78binary_add.33': [(<numba.core.ir.Assign object at 0x000001E3C3F15610>,
                                   16)],
             '$80inplace_add.34': [(<numba.core.ir.Assign object at 0x000001E3C3F15790>,
                                    16)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001E3C3EE0DC0>,
                                    0)],
             '$90return_value.1': [(<numba.core.ir.Assign object at 0x000001E3C3F0BA00>,
                                    88)],
             '$const88.0': [(<numba.core.ir.Assign object at 0x000001E3C3F127C0>,
                             88)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001E3C3EE0C70>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001E3C3F0B310>,
                           14)],
             'i': [(<numba.core.ir.Assign object at 0x000001E3C3F0B8E0>, 16)],
             'out': [(<numba.core.ir.Assign object at 0x000001E3C3EE07C0>, 0)],
             'p': [(<numba.core.ir.Assign object at 0x000001E3C3F12460>, 16)],
             'polarity_offset': [(<numba.core.ir.Assign object at 0x000001E3C3EE0340>,
                                  0)],
             'ps': [(<numba.core.ir.Assign object at 0x000001E3C3EDA220>, 0)],
             'resolution_level': [(<numba.core.ir.Assign object at 0x000001E3C3EE0580>,
                                   0)],
             't': [(<numba.core.ir.Assign object at 0x000001E3C3F12340>, 16)],
             'ts': [(<numba.core.ir.Assign object at 0x000001E3C3EDAA90>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x000001E3C3F12100>, 16)],
             'xs': [(<numba.core.ir.Assign object at 0x000001E3C3EDA5E0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000001E3C3F12220>, 16)],
             'ys': [(<numba.core.ir.Assign object at 0x000001E3C3EDAD60>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x000001E3C3ECCE50>
INFO:data.utils.data_loader_split:Split train, # views: 1001, # effective views: 900
INFO:data.utils.data_loader_split:raw intrinsics_files: 1001
INFO:data.utils.data_loader_split:raw pose_files: 1001
INFO:data.utils.data_loader_split:raw img_files: 1001
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=78)
           2	LOAD_GLOBAL(arg=0, lineno=80)
           4	LOAD_GLOBAL(arg=1, lineno=80)
           6	LOAD_FAST(arg=0, lineno=80)
           8	CALL_FUNCTION(arg=1, lineno=80)
          10	CALL_FUNCTION(arg=1, lineno=80)
          12	GET_ITER(arg=None, lineno=80)
>         14	FOR_ITER(arg=72, lineno=80)
          16	STORE_FAST(arg=7, lineno=80)
          18	LOAD_FAST(arg=0, lineno=81)
          20	LOAD_FAST(arg=7, lineno=81)
          22	BINARY_SUBSCR(arg=None, lineno=81)
          24	LOAD_FAST(arg=1, lineno=81)
          26	LOAD_FAST(arg=7, lineno=81)
          28	BINARY_SUBSCR(arg=None, lineno=81)
          30	LOAD_FAST(arg=2, lineno=81)
          32	LOAD_FAST(arg=7, lineno=81)
          34	BINARY_SUBSCR(arg=None, lineno=81)
          36	LOAD_FAST(arg=3, lineno=81)
          38	LOAD_FAST(arg=7, lineno=81)
          40	BINARY_SUBSCR(arg=None, lineno=81)
          42	BUILD_TUPLE(arg=4, lineno=81)
          44	UNPACK_SEQUENCE(arg=4, lineno=81)
          46	STORE_FAST(arg=8, lineno=81)
          48	STORE_FAST(arg=9, lineno=81)
          50	STORE_FAST(arg=10, lineno=81)
          52	STORE_FAST(arg=11, lineno=81)
          54	LOAD_FAST(arg=4, lineno=82)
          56	LOAD_FAST(arg=9, lineno=82)
          58	LOAD_FAST(arg=5, lineno=82)
          60	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          62	LOAD_FAST(arg=8, lineno=82)
          64	LOAD_FAST(arg=5, lineno=82)
          66	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          68	BUILD_TUPLE(arg=2, lineno=82)
          70	DUP_TOP_TWO(arg=None, lineno=82)
          72	BINARY_SUBSCR(arg=None, lineno=82)
          74	LOAD_FAST(arg=11, lineno=82)
          76	LOAD_FAST(arg=6, lineno=82)
          78	BINARY_ADD(arg=None, lineno=82)
          80	INPLACE_ADD(arg=None, lineno=82)
          82	ROT_THREE(arg=None, lineno=82)
          84	STORE_SUBSCR(arg=None, lineno=82)
          86	JUMP_ABSOLUTE(arg=14, lineno=82)
>         88	LOAD_CONST(arg=0, lineno=82)
          90	RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$xs6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=80)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=72, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=88 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=0, lineno=82)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$const88.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=16 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=7, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5', '$i26.6']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8', '$i32.9']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11', '$i38.12']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BUILD_TUPLE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=UNPACK_SEQUENCE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$42build_tuple.14']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=8, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16', '$44unpack_sequence.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=9, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=10, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=11, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21', '$resolution_level58.22']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=8, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24', '$resolution_level64.25']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=2, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$66binary_floor_divide.26']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=DUP_TOP_TWO(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$70dup_top_two.28', '$70dup_top_two.29']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=11, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31', '$polarity_offset76.32']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=INPLACE_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$78binary_add.33']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=ROT_THREE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$80inplace_add.34']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$80inplace_add.34', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=JUMP_ABSOLUTE(arg=14, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$xs6.2'}), (8, {'func': '$4load_global.1', 'args': ['$xs6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$xs18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$xs18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$ys24.5'}), (26, {'res': '$i26.6'}), (28, {'index': '$i26.6', 'target': '$ys24.5', 'res': '$28binary_subscr.7'}), (30, {'res': '$ts30.8'}), (32, {'res': '$i32.9'}), (34, {'index': '$i32.9', 'target': '$ts30.8', 'res': '$34binary_subscr.10'}), (36, {'res': '$ps36.11'}), (38, {'res': '$i38.12'}), (40, {'index': '$i38.12', 'target': '$ps36.11', 'res': '$40binary_subscr.13'}), (42, {'items': ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13'], 'res': '$42build_tuple.14'}), (44, {'iterable': '$42build_tuple.14', 'stores': ['$44unpack_sequence.15', '$44unpack_sequence.16', '$44unpack_sequence.17', '$44unpack_sequence.18'], 'tupleobj': '$44unpack_sequence.19'}), (46, {'value': '$44unpack_sequence.15'}), (48, {'value': '$44unpack_sequence.16'}), (50, {'value': '$44unpack_sequence.17'}), (52, {'value': '$44unpack_sequence.18'}), (54, {'res': '$out54.20'}), (56, {'res': '$y56.21'}), (58, {'res': '$resolution_level58.22'}), (60, {'lhs': '$y56.21', 'rhs': '$resolution_level58.22', 'res': '$60binary_floor_divide.23'}), (62, {'res': '$x62.24'}), (64, {'res': '$resolution_level64.25'}), (66, {'lhs': '$x62.24', 'rhs': '$resolution_level64.25', 'res': '$66binary_floor_divide.26'}), (68, {'items': ['$60binary_floor_divide.23', '$66binary_floor_divide.26'], 'res': '$68build_tuple.27'}), (70, {'orig': ['$out54.20', '$68build_tuple.27'], 'duped': ['$70dup_top_two.28', '$70dup_top_two.29']}), (72, {'index': '$70dup_top_two.29', 'target': '$70dup_top_two.28', 'res': '$72binary_subscr.30'}), (74, {'res': '$p74.31'}), (76, {'res': '$polarity_offset76.32'}), (78, {'lhs': '$p74.31', 'rhs': '$polarity_offset76.32', 'res': '$78binary_add.33'}), (80, {'lhs': '$72binary_subscr.30', 'rhs': '$78binary_add.33', 'res': '$80inplace_add.34'}), (84, {'target': '$out54.20', 'index': '$68build_tuple.27', 'value': '$80inplace_add.34'}), (86, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$const88.0'}), (90, {'retval': '$const88.0', 'castval': '$90return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    xs = arg(0, name=xs)                     ['xs']
    ys = arg(1, name=ys)                     ['ys']
    ts = arg(2, name=ts)                     ['ts']
    ps = arg(3, name=ps)                     ['ps']
    out = arg(4, name=out)                   ['out']
    resolution_level = arg(5, name=resolution_level) ['resolution_level']
    polarity_offset = arg(6, name=polarity_offset) ['polarity_offset']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'xs']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 88             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'xs']
    $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>) ['$28binary_subscr.7', 'i', 'ys']
    $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>) ['$34binary_subscr.10', 'i', 'ts']
    $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>) ['$40binary_subscr.13', 'i', 'ps']
    $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)]) ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13', '$42build_tuple.14']
    $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4) ['$42build_tuple.14', '$44unpack_sequence.19']
    $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.15', '$44unpack_sequence.19']
    $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.16', '$44unpack_sequence.19']
    $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.17', '$44unpack_sequence.19']
    $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.18', '$44unpack_sequence.19']
    x = $44unpack_sequence.15                ['$44unpack_sequence.15', 'x']
    y = $44unpack_sequence.16                ['$44unpack_sequence.16', 'y']
    t = $44unpack_sequence.17                ['$44unpack_sequence.17', 't']
    p = $44unpack_sequence.18                ['$44unpack_sequence.18', 'p']
    $60binary_floor_divide.23 = y // resolution_level ['$60binary_floor_divide.23', 'resolution_level', 'y']
    $66binary_floor_divide.26 = x // resolution_level ['$66binary_floor_divide.26', 'resolution_level', 'x']
    $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)]) ['$60binary_floor_divide.23', '$66binary_floor_divide.26', '$68build_tuple.27']
    $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>) ['$68build_tuple.27', '$72binary_subscr.30', 'out']
    $78binary_add.33 = p + polarity_offset   ['$78binary_add.33', 'p', 'polarity_offset']
    $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined) ['$72binary_subscr.30', '$78binary_add.33', '$80inplace_add.34']
    out[$68build_tuple.27] = $80inplace_add.34 ['$68build_tuple.27', '$80inplace_add.34', 'out']
    jump 14                                  []
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x00000225E307BE50>
DEBUG:numba.core.ssa:on stmt: xs = arg(0, name=xs)
DEBUG:numba.core.ssa:on stmt: ys = arg(1, name=ys)
DEBUG:numba.core.ssa:on stmt: ts = arg(2, name=ts)
DEBUG:numba.core.ssa:on stmt: ps = arg(3, name=ps)
DEBUG:numba.core.ssa:on stmt: out = arg(4, name=out)
DEBUG:numba.core.ssa:on stmt: resolution_level = arg(5, name=resolution_level)
DEBUG:numba.core.ssa:on stmt: polarity_offset = arg(6, name=polarity_offset)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x00000225E307BE50>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 88
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x00000225E307BE50>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)])
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: x = $44unpack_sequence.15
DEBUG:numba.core.ssa:on stmt: y = $44unpack_sequence.16
DEBUG:numba.core.ssa:on stmt: t = $44unpack_sequence.17
DEBUG:numba.core.ssa:on stmt: p = $44unpack_sequence.18
DEBUG:numba.core.ssa:on stmt: $60binary_floor_divide.23 = y // resolution_level
DEBUG:numba.core.ssa:on stmt: $66binary_floor_divide.26 = x // resolution_level
DEBUG:numba.core.ssa:on stmt: $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)])
DEBUG:numba.core.ssa:on stmt: $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $78binary_add.33 = p + polarity_offset
DEBUG:numba.core.ssa:on stmt: $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: out[$68build_tuple.27] = $80inplace_add.34
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 88
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x00000225E307BE50>
DEBUG:numba.core.ssa:on stmt: $const88.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $90return_value.1 = cast(value=$const88.0)
DEBUG:numba.core.ssa:on stmt: return $90return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x00000225E308FF70>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x00000225E30BA0D0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x00000225E30BA400>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x00000225E30BA520>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x00000225E30BA640>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000225E30BAD00>,
                                     16)],
             '$28binary_subscr.7': [(<numba.core.ir.Assign object at 0x00000225E30BF100>,
                                     16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000225E308F070>,
                                  0)],
             '$34binary_subscr.10': [(<numba.core.ir.Assign object at 0x00000225E30BF4C0>,
                                      16)],
             '$40binary_subscr.13': [(<numba.core.ir.Assign object at 0x00000225E30BF880>,
                                      16)],
             '$42build_tuple.14': [(<numba.core.ir.Assign object at 0x00000225E30BFA00>,
                                    16)],
             '$44unpack_sequence.15': [(<numba.core.ir.Assign object at 0x00000225E30BFCD0>,
                                        16)],
             '$44unpack_sequence.16': [(<numba.core.ir.Assign object at 0x00000225E30BFDF0>,
                                        16)],
             '$44unpack_sequence.17': [(<numba.core.ir.Assign object at 0x00000225E30BFF10>,
                                        16)],
             '$44unpack_sequence.18': [(<numba.core.ir.Assign object at 0x00000225E30C2070>,
                                        16)],
             '$44unpack_sequence.19': [(<numba.core.ir.Assign object at 0x00000225E30BFB80>,
                                        16)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x00000225E308FAF0>,
                                  0)],
             '$60binary_floor_divide.23': [(<numba.core.ir.Assign object at 0x00000225E30C29A0>,
                                            16)],
             '$66binary_floor_divide.26': [(<numba.core.ir.Assign object at 0x00000225E30C2D60>,
                                            16)],
             '$68build_tuple.27': [(<numba.core.ir.Assign object at 0x00000225E30C2EE0>,
                                    16)],
             '$72binary_subscr.30': [(<numba.core.ir.Assign object at 0x00000225E30C5280>,
                                      16)],
             '$78binary_add.33': [(<numba.core.ir.Assign object at 0x00000225E30C5640>,
                                   16)],
             '$80inplace_add.34': [(<numba.core.ir.Assign object at 0x00000225E30C57C0>,
                                    16)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x00000225E308FDF0>,
                                    0)],
             '$90return_value.1': [(<numba.core.ir.Assign object at 0x00000225E30BAA30>,
                                    88)],
             '$const88.0': [(<numba.core.ir.Assign object at 0x00000225E30C27F0>,
                             88)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x00000225E308FCA0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x00000225E30BA340>,
                           14)],
             'i': [(<numba.core.ir.Assign object at 0x00000225E30BA910>, 16)],
             'out': [(<numba.core.ir.Assign object at 0x00000225E308F790>, 0)],
             'p': [(<numba.core.ir.Assign object at 0x00000225E30C2490>, 16)],
             'polarity_offset': [(<numba.core.ir.Assign object at 0x00000225E308F310>,
                                  0)],
             'ps': [(<numba.core.ir.Assign object at 0x00000225E30891C0>, 0)],
             'resolution_level': [(<numba.core.ir.Assign object at 0x00000225E308F550>,
                                   0)],
             't': [(<numba.core.ir.Assign object at 0x00000225E30C2370>, 16)],
             'ts': [(<numba.core.ir.Assign object at 0x00000225E3089A60>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x00000225E30C2130>, 16)],
             'xs': [(<numba.core.ir.Assign object at 0x00000225E3089670>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x00000225E30C2250>, 16)],
             'ys': [(<numba.core.ir.Assign object at 0x00000225E3089DF0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x00000225E307BE50>
INFO:data.utils.data_loader_split:Split train, # views: 1001, # effective views: 990
INFO:data.utils.data_loader_split:raw intrinsics_files: 1001
INFO:data.utils.data_loader_split:raw pose_files: 1001
INFO:data.utils.data_loader_split:raw img_files: 1001
INFO:data.utils.data_loader_split:raw intrinsics_files: 1001
INFO:data.utils.data_loader_split:raw pose_files: 1001
INFO:data.utils.data_loader_split:raw img_files: 1001
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=78)
           2	LOAD_GLOBAL(arg=0, lineno=80)
           4	LOAD_GLOBAL(arg=1, lineno=80)
           6	LOAD_FAST(arg=0, lineno=80)
           8	CALL_FUNCTION(arg=1, lineno=80)
          10	CALL_FUNCTION(arg=1, lineno=80)
          12	GET_ITER(arg=None, lineno=80)
>         14	FOR_ITER(arg=72, lineno=80)
          16	STORE_FAST(arg=7, lineno=80)
          18	LOAD_FAST(arg=0, lineno=81)
          20	LOAD_FAST(arg=7, lineno=81)
          22	BINARY_SUBSCR(arg=None, lineno=81)
          24	LOAD_FAST(arg=1, lineno=81)
          26	LOAD_FAST(arg=7, lineno=81)
          28	BINARY_SUBSCR(arg=None, lineno=81)
          30	LOAD_FAST(arg=2, lineno=81)
          32	LOAD_FAST(arg=7, lineno=81)
          34	BINARY_SUBSCR(arg=None, lineno=81)
          36	LOAD_FAST(arg=3, lineno=81)
          38	LOAD_FAST(arg=7, lineno=81)
          40	BINARY_SUBSCR(arg=None, lineno=81)
          42	BUILD_TUPLE(arg=4, lineno=81)
          44	UNPACK_SEQUENCE(arg=4, lineno=81)
          46	STORE_FAST(arg=8, lineno=81)
          48	STORE_FAST(arg=9, lineno=81)
          50	STORE_FAST(arg=10, lineno=81)
          52	STORE_FAST(arg=11, lineno=81)
          54	LOAD_FAST(arg=4, lineno=82)
          56	LOAD_FAST(arg=9, lineno=82)
          58	LOAD_FAST(arg=5, lineno=82)
          60	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          62	LOAD_FAST(arg=8, lineno=82)
          64	LOAD_FAST(arg=5, lineno=82)
          66	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          68	BUILD_TUPLE(arg=2, lineno=82)
          70	DUP_TOP_TWO(arg=None, lineno=82)
          72	BINARY_SUBSCR(arg=None, lineno=82)
          74	LOAD_FAST(arg=11, lineno=82)
          76	LOAD_FAST(arg=6, lineno=82)
          78	BINARY_ADD(arg=None, lineno=82)
          80	INPLACE_ADD(arg=None, lineno=82)
          82	ROT_THREE(arg=None, lineno=82)
          84	STORE_SUBSCR(arg=None, lineno=82)
          86	JUMP_ABSOLUTE(arg=14, lineno=82)
>         88	LOAD_CONST(arg=0, lineno=82)
          90	RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$xs6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=80)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=72, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=88 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=0, lineno=82)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$const88.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=16 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=7, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5', '$i26.6']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8', '$i32.9']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11', '$i38.12']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BUILD_TUPLE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=UNPACK_SEQUENCE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$42build_tuple.14']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=8, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16', '$44unpack_sequence.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=9, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=10, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=11, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21', '$resolution_level58.22']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=8, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24', '$resolution_level64.25']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=2, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$66binary_floor_divide.26']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=DUP_TOP_TWO(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$70dup_top_two.28', '$70dup_top_two.29']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=11, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31', '$polarity_offset76.32']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=INPLACE_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$78binary_add.33']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=ROT_THREE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$80inplace_add.34']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$80inplace_add.34', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=JUMP_ABSOLUTE(arg=14, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$xs6.2'}), (8, {'func': '$4load_global.1', 'args': ['$xs6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$xs18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$xs18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$ys24.5'}), (26, {'res': '$i26.6'}), (28, {'index': '$i26.6', 'target': '$ys24.5', 'res': '$28binary_subscr.7'}), (30, {'res': '$ts30.8'}), (32, {'res': '$i32.9'}), (34, {'index': '$i32.9', 'target': '$ts30.8', 'res': '$34binary_subscr.10'}), (36, {'res': '$ps36.11'}), (38, {'res': '$i38.12'}), (40, {'index': '$i38.12', 'target': '$ps36.11', 'res': '$40binary_subscr.13'}), (42, {'items': ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13'], 'res': '$42build_tuple.14'}), (44, {'iterable': '$42build_tuple.14', 'stores': ['$44unpack_sequence.15', '$44unpack_sequence.16', '$44unpack_sequence.17', '$44unpack_sequence.18'], 'tupleobj': '$44unpack_sequence.19'}), (46, {'value': '$44unpack_sequence.15'}), (48, {'value': '$44unpack_sequence.16'}), (50, {'value': '$44unpack_sequence.17'}), (52, {'value': '$44unpack_sequence.18'}), (54, {'res': '$out54.20'}), (56, {'res': '$y56.21'}), (58, {'res': '$resolution_level58.22'}), (60, {'lhs': '$y56.21', 'rhs': '$resolution_level58.22', 'res': '$60binary_floor_divide.23'}), (62, {'res': '$x62.24'}), (64, {'res': '$resolution_level64.25'}), (66, {'lhs': '$x62.24', 'rhs': '$resolution_level64.25', 'res': '$66binary_floor_divide.26'}), (68, {'items': ['$60binary_floor_divide.23', '$66binary_floor_divide.26'], 'res': '$68build_tuple.27'}), (70, {'orig': ['$out54.20', '$68build_tuple.27'], 'duped': ['$70dup_top_two.28', '$70dup_top_two.29']}), (72, {'index': '$70dup_top_two.29', 'target': '$70dup_top_two.28', 'res': '$72binary_subscr.30'}), (74, {'res': '$p74.31'}), (76, {'res': '$polarity_offset76.32'}), (78, {'lhs': '$p74.31', 'rhs': '$polarity_offset76.32', 'res': '$78binary_add.33'}), (80, {'lhs': '$72binary_subscr.30', 'rhs': '$78binary_add.33', 'res': '$80inplace_add.34'}), (84, {'target': '$out54.20', 'index': '$68build_tuple.27', 'value': '$80inplace_add.34'}), (86, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$const88.0'}), (90, {'retval': '$const88.0', 'castval': '$90return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    xs = arg(0, name=xs)                     ['xs']
    ys = arg(1, name=ys)                     ['ys']
    ts = arg(2, name=ts)                     ['ts']
    ps = arg(3, name=ps)                     ['ps']
    out = arg(4, name=out)                   ['out']
    resolution_level = arg(5, name=resolution_level) ['resolution_level']
    polarity_offset = arg(6, name=polarity_offset) ['polarity_offset']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'xs']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 88             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'xs']
    $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>) ['$28binary_subscr.7', 'i', 'ys']
    $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>) ['$34binary_subscr.10', 'i', 'ts']
    $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>) ['$40binary_subscr.13', 'i', 'ps']
    $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)]) ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13', '$42build_tuple.14']
    $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4) ['$42build_tuple.14', '$44unpack_sequence.19']
    $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.15', '$44unpack_sequence.19']
    $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.16', '$44unpack_sequence.19']
    $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.17', '$44unpack_sequence.19']
    $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.18', '$44unpack_sequence.19']
    x = $44unpack_sequence.15                ['$44unpack_sequence.15', 'x']
    y = $44unpack_sequence.16                ['$44unpack_sequence.16', 'y']
    t = $44unpack_sequence.17                ['$44unpack_sequence.17', 't']
    p = $44unpack_sequence.18                ['$44unpack_sequence.18', 'p']
    $60binary_floor_divide.23 = y // resolution_level ['$60binary_floor_divide.23', 'resolution_level', 'y']
    $66binary_floor_divide.26 = x // resolution_level ['$66binary_floor_divide.26', 'resolution_level', 'x']
    $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)]) ['$60binary_floor_divide.23', '$66binary_floor_divide.26', '$68build_tuple.27']
    $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>) ['$68build_tuple.27', '$72binary_subscr.30', 'out']
    $78binary_add.33 = p + polarity_offset   ['$78binary_add.33', 'p', 'polarity_offset']
    $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined) ['$72binary_subscr.30', '$78binary_add.33', '$80inplace_add.34']
    out[$68build_tuple.27] = $80inplace_add.34 ['$68build_tuple.27', '$80inplace_add.34', 'out']
    jump 14                                  []
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000011DFBD7BF10>
DEBUG:numba.core.ssa:on stmt: xs = arg(0, name=xs)
DEBUG:numba.core.ssa:on stmt: ys = arg(1, name=ys)
DEBUG:numba.core.ssa:on stmt: ts = arg(2, name=ts)
DEBUG:numba.core.ssa:on stmt: ps = arg(3, name=ps)
DEBUG:numba.core.ssa:on stmt: out = arg(4, name=out)
DEBUG:numba.core.ssa:on stmt: resolution_level = arg(5, name=resolution_level)
DEBUG:numba.core.ssa:on stmt: polarity_offset = arg(6, name=polarity_offset)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000011DFBD7BF10>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 88
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000011DFBD7BF10>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)])
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: x = $44unpack_sequence.15
DEBUG:numba.core.ssa:on stmt: y = $44unpack_sequence.16
DEBUG:numba.core.ssa:on stmt: t = $44unpack_sequence.17
DEBUG:numba.core.ssa:on stmt: p = $44unpack_sequence.18
DEBUG:numba.core.ssa:on stmt: $60binary_floor_divide.23 = y // resolution_level
DEBUG:numba.core.ssa:on stmt: $66binary_floor_divide.26 = x // resolution_level
DEBUG:numba.core.ssa:on stmt: $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)])
DEBUG:numba.core.ssa:on stmt: $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $78binary_add.33 = p + polarity_offset
DEBUG:numba.core.ssa:on stmt: $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: out[$68build_tuple.27] = $80inplace_add.34
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 88
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x0000011DFBD7BF10>
DEBUG:numba.core.ssa:on stmt: $const88.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $90return_value.1 = cast(value=$const88.0)
DEBUG:numba.core.ssa:on stmt: return $90return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000011DFBD50F70>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000011DFBD7B0D0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000011DFBD7B400>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000011DFBD7B520>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000011DFBD7B640>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000011DFBD7BD00>,
                                     16)],
             '$28binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000011DFBD80100>,
                                     16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000011DFBD50070>,
                                  0)],
             '$34binary_subscr.10': [(<numba.core.ir.Assign object at 0x0000011DFBD804C0>,
                                      16)],
             '$40binary_subscr.13': [(<numba.core.ir.Assign object at 0x0000011DFBD80880>,
                                      16)],
             '$42build_tuple.14': [(<numba.core.ir.Assign object at 0x0000011DFBD80A00>,
                                    16)],
             '$44unpack_sequence.15': [(<numba.core.ir.Assign object at 0x0000011DFBD80CD0>,
                                        16)],
             '$44unpack_sequence.16': [(<numba.core.ir.Assign object at 0x0000011DFBD80DF0>,
                                        16)],
             '$44unpack_sequence.17': [(<numba.core.ir.Assign object at 0x0000011DFBD80F10>,
                                        16)],
             '$44unpack_sequence.18': [(<numba.core.ir.Assign object at 0x0000011DFBD82070>,
                                        16)],
             '$44unpack_sequence.19': [(<numba.core.ir.Assign object at 0x0000011DFBD80B80>,
                                        16)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000011DFBD50AF0>,
                                  0)],
             '$60binary_floor_divide.23': [(<numba.core.ir.Assign object at 0x0000011DFBD829A0>,
                                            16)],
             '$66binary_floor_divide.26': [(<numba.core.ir.Assign object at 0x0000011DFBD82D60>,
                                            16)],
             '$68build_tuple.27': [(<numba.core.ir.Assign object at 0x0000011DFBD82EE0>,
                                    16)],
             '$72binary_subscr.30': [(<numba.core.ir.Assign object at 0x0000011DFBD85280>,
                                      16)],
             '$78binary_add.33': [(<numba.core.ir.Assign object at 0x0000011DFBD85640>,
                                   16)],
             '$80inplace_add.34': [(<numba.core.ir.Assign object at 0x0000011DFBD857C0>,
                                    16)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000011DFBD50DF0>,
                                    0)],
             '$90return_value.1': [(<numba.core.ir.Assign object at 0x0000011DFBD7BA30>,
                                    88)],
             '$const88.0': [(<numba.core.ir.Assign object at 0x0000011DFBD827F0>,
                             88)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000011DFBD50CA0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000011DFBD7B340>,
                           14)],
             'i': [(<numba.core.ir.Assign object at 0x0000011DFBD7B910>, 16)],
             'out': [(<numba.core.ir.Assign object at 0x0000011DFBD50790>, 0)],
             'p': [(<numba.core.ir.Assign object at 0x0000011DFBD82490>, 16)],
             'polarity_offset': [(<numba.core.ir.Assign object at 0x0000011DFBD50310>,
                                  0)],
             'ps': [(<numba.core.ir.Assign object at 0x0000011DFBD491C0>, 0)],
             'resolution_level': [(<numba.core.ir.Assign object at 0x0000011DFBD50550>,
                                   0)],
             't': [(<numba.core.ir.Assign object at 0x0000011DFBD82370>, 16)],
             'ts': [(<numba.core.ir.Assign object at 0x0000011DFBD49A60>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x0000011DFBD82130>, 16)],
             'xs': [(<numba.core.ir.Assign object at 0x0000011DFBD49730>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x0000011DFBD82250>, 16)],
             'ys': [(<numba.core.ir.Assign object at 0x0000011DFBD49DF0>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x0000011DFBD7BF10>
INFO:data.utils.data_loader_split:Split train, # views: 1001, # effective views: 990
INFO:data.utils.data_loader_split:raw intrinsics_files: 1001
INFO:data.utils.data_loader_split:raw pose_files: 1001
INFO:data.utils.data_loader_split:raw img_files: 1001
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=78)
           2	LOAD_GLOBAL(arg=0, lineno=80)
           4	LOAD_GLOBAL(arg=1, lineno=80)
           6	LOAD_FAST(arg=0, lineno=80)
           8	CALL_FUNCTION(arg=1, lineno=80)
          10	CALL_FUNCTION(arg=1, lineno=80)
          12	GET_ITER(arg=None, lineno=80)
>         14	FOR_ITER(arg=72, lineno=80)
          16	STORE_FAST(arg=7, lineno=80)
          18	LOAD_FAST(arg=0, lineno=81)
          20	LOAD_FAST(arg=7, lineno=81)
          22	BINARY_SUBSCR(arg=None, lineno=81)
          24	LOAD_FAST(arg=1, lineno=81)
          26	LOAD_FAST(arg=7, lineno=81)
          28	BINARY_SUBSCR(arg=None, lineno=81)
          30	LOAD_FAST(arg=2, lineno=81)
          32	LOAD_FAST(arg=7, lineno=81)
          34	BINARY_SUBSCR(arg=None, lineno=81)
          36	LOAD_FAST(arg=3, lineno=81)
          38	LOAD_FAST(arg=7, lineno=81)
          40	BINARY_SUBSCR(arg=None, lineno=81)
          42	BUILD_TUPLE(arg=4, lineno=81)
          44	UNPACK_SEQUENCE(arg=4, lineno=81)
          46	STORE_FAST(arg=8, lineno=81)
          48	STORE_FAST(arg=9, lineno=81)
          50	STORE_FAST(arg=10, lineno=81)
          52	STORE_FAST(arg=11, lineno=81)
          54	LOAD_FAST(arg=4, lineno=82)
          56	LOAD_FAST(arg=9, lineno=82)
          58	LOAD_FAST(arg=5, lineno=82)
          60	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          62	LOAD_FAST(arg=8, lineno=82)
          64	LOAD_FAST(arg=5, lineno=82)
          66	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          68	BUILD_TUPLE(arg=2, lineno=82)
          70	DUP_TOP_TWO(arg=None, lineno=82)
          72	BINARY_SUBSCR(arg=None, lineno=82)
          74	LOAD_FAST(arg=11, lineno=82)
          76	LOAD_FAST(arg=6, lineno=82)
          78	BINARY_ADD(arg=None, lineno=82)
          80	INPLACE_ADD(arg=None, lineno=82)
          82	ROT_THREE(arg=None, lineno=82)
          84	STORE_SUBSCR(arg=None, lineno=82)
          86	JUMP_ABSOLUTE(arg=14, lineno=82)
>         88	LOAD_CONST(arg=0, lineno=82)
          90	RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$xs6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=80)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=72, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=88 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=0, lineno=82)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$const88.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=16 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=7, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5', '$i26.6']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8', '$i32.9']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11', '$i38.12']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BUILD_TUPLE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=UNPACK_SEQUENCE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$42build_tuple.14']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=8, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16', '$44unpack_sequence.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=9, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=10, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=11, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21', '$resolution_level58.22']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=8, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24', '$resolution_level64.25']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=2, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$66binary_floor_divide.26']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=DUP_TOP_TWO(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$70dup_top_two.28', '$70dup_top_two.29']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=11, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31', '$polarity_offset76.32']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=INPLACE_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$78binary_add.33']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=ROT_THREE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$80inplace_add.34']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$80inplace_add.34', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=JUMP_ABSOLUTE(arg=14, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$xs6.2'}), (8, {'func': '$4load_global.1', 'args': ['$xs6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$xs18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$xs18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$ys24.5'}), (26, {'res': '$i26.6'}), (28, {'index': '$i26.6', 'target': '$ys24.5', 'res': '$28binary_subscr.7'}), (30, {'res': '$ts30.8'}), (32, {'res': '$i32.9'}), (34, {'index': '$i32.9', 'target': '$ts30.8', 'res': '$34binary_subscr.10'}), (36, {'res': '$ps36.11'}), (38, {'res': '$i38.12'}), (40, {'index': '$i38.12', 'target': '$ps36.11', 'res': '$40binary_subscr.13'}), (42, {'items': ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13'], 'res': '$42build_tuple.14'}), (44, {'iterable': '$42build_tuple.14', 'stores': ['$44unpack_sequence.15', '$44unpack_sequence.16', '$44unpack_sequence.17', '$44unpack_sequence.18'], 'tupleobj': '$44unpack_sequence.19'}), (46, {'value': '$44unpack_sequence.15'}), (48, {'value': '$44unpack_sequence.16'}), (50, {'value': '$44unpack_sequence.17'}), (52, {'value': '$44unpack_sequence.18'}), (54, {'res': '$out54.20'}), (56, {'res': '$y56.21'}), (58, {'res': '$resolution_level58.22'}), (60, {'lhs': '$y56.21', 'rhs': '$resolution_level58.22', 'res': '$60binary_floor_divide.23'}), (62, {'res': '$x62.24'}), (64, {'res': '$resolution_level64.25'}), (66, {'lhs': '$x62.24', 'rhs': '$resolution_level64.25', 'res': '$66binary_floor_divide.26'}), (68, {'items': ['$60binary_floor_divide.23', '$66binary_floor_divide.26'], 'res': '$68build_tuple.27'}), (70, {'orig': ['$out54.20', '$68build_tuple.27'], 'duped': ['$70dup_top_two.28', '$70dup_top_two.29']}), (72, {'index': '$70dup_top_two.29', 'target': '$70dup_top_two.28', 'res': '$72binary_subscr.30'}), (74, {'res': '$p74.31'}), (76, {'res': '$polarity_offset76.32'}), (78, {'lhs': '$p74.31', 'rhs': '$polarity_offset76.32', 'res': '$78binary_add.33'}), (80, {'lhs': '$72binary_subscr.30', 'rhs': '$78binary_add.33', 'res': '$80inplace_add.34'}), (84, {'target': '$out54.20', 'index': '$68build_tuple.27', 'value': '$80inplace_add.34'}), (86, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$const88.0'}), (90, {'retval': '$const88.0', 'castval': '$90return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    xs = arg(0, name=xs)                     ['xs']
    ys = arg(1, name=ys)                     ['ys']
    ts = arg(2, name=ts)                     ['ts']
    ps = arg(3, name=ps)                     ['ps']
    out = arg(4, name=out)                   ['out']
    resolution_level = arg(5, name=resolution_level) ['resolution_level']
    polarity_offset = arg(6, name=polarity_offset) ['polarity_offset']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'xs']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 88             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'xs']
    $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>) ['$28binary_subscr.7', 'i', 'ys']
    $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>) ['$34binary_subscr.10', 'i', 'ts']
    $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>) ['$40binary_subscr.13', 'i', 'ps']
    $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)]) ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13', '$42build_tuple.14']
    $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4) ['$42build_tuple.14', '$44unpack_sequence.19']
    $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.15', '$44unpack_sequence.19']
    $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.16', '$44unpack_sequence.19']
    $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.17', '$44unpack_sequence.19']
    $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.18', '$44unpack_sequence.19']
    x = $44unpack_sequence.15                ['$44unpack_sequence.15', 'x']
    y = $44unpack_sequence.16                ['$44unpack_sequence.16', 'y']
    t = $44unpack_sequence.17                ['$44unpack_sequence.17', 't']
    p = $44unpack_sequence.18                ['$44unpack_sequence.18', 'p']
    $60binary_floor_divide.23 = y // resolution_level ['$60binary_floor_divide.23', 'resolution_level', 'y']
    $66binary_floor_divide.26 = x // resolution_level ['$66binary_floor_divide.26', 'resolution_level', 'x']
    $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)]) ['$60binary_floor_divide.23', '$66binary_floor_divide.26', '$68build_tuple.27']
    $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>) ['$68build_tuple.27', '$72binary_subscr.30', 'out']
    $78binary_add.33 = p + polarity_offset   ['$78binary_add.33', 'p', 'polarity_offset']
    $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined) ['$72binary_subscr.30', '$78binary_add.33', '$80inplace_add.34']
    out[$68build_tuple.27] = $80inplace_add.34 ['$68build_tuple.27', '$80inplace_add.34', 'out']
    jump 14                                  []
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E372A6BE50>
DEBUG:numba.core.ssa:on stmt: xs = arg(0, name=xs)
DEBUG:numba.core.ssa:on stmt: ys = arg(1, name=ys)
DEBUG:numba.core.ssa:on stmt: ts = arg(2, name=ts)
DEBUG:numba.core.ssa:on stmt: ps = arg(3, name=ps)
DEBUG:numba.core.ssa:on stmt: out = arg(4, name=out)
DEBUG:numba.core.ssa:on stmt: resolution_level = arg(5, name=resolution_level)
DEBUG:numba.core.ssa:on stmt: polarity_offset = arg(6, name=polarity_offset)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E372A6BE50>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 88
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E372A6BE50>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)])
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: x = $44unpack_sequence.15
DEBUG:numba.core.ssa:on stmt: y = $44unpack_sequence.16
DEBUG:numba.core.ssa:on stmt: t = $44unpack_sequence.17
DEBUG:numba.core.ssa:on stmt: p = $44unpack_sequence.18
DEBUG:numba.core.ssa:on stmt: $60binary_floor_divide.23 = y // resolution_level
DEBUG:numba.core.ssa:on stmt: $66binary_floor_divide.26 = x // resolution_level
DEBUG:numba.core.ssa:on stmt: $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)])
DEBUG:numba.core.ssa:on stmt: $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $78binary_add.33 = p + polarity_offset
DEBUG:numba.core.ssa:on stmt: $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: out[$68build_tuple.27] = $80inplace_add.34
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 88
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001E372A6BE50>
DEBUG:numba.core.ssa:on stmt: $const88.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $90return_value.1 = cast(value=$const88.0)
DEBUG:numba.core.ssa:on stmt: return $90return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001E372A7FF10>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001E372AAB070>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001E372AAB3A0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001E372AAB4C0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001E372AAB5E0>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001E372AABCA0>,
                                     16)],
             '$28binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001E372AB00A0>,
                                     16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001E372A7F070>,
                                  0)],
             '$34binary_subscr.10': [(<numba.core.ir.Assign object at 0x000001E372AB0460>,
                                      16)],
             '$40binary_subscr.13': [(<numba.core.ir.Assign object at 0x000001E372AB0820>,
                                      16)],
             '$42build_tuple.14': [(<numba.core.ir.Assign object at 0x000001E372AB09A0>,
                                    16)],
             '$44unpack_sequence.15': [(<numba.core.ir.Assign object at 0x000001E372AB0C70>,
                                        16)],
             '$44unpack_sequence.16': [(<numba.core.ir.Assign object at 0x000001E372AB0D90>,
                                        16)],
             '$44unpack_sequence.17': [(<numba.core.ir.Assign object at 0x000001E372AB0EB0>,
                                        16)],
             '$44unpack_sequence.18': [(<numba.core.ir.Assign object at 0x000001E372AB0FD0>,
                                        16)],
             '$44unpack_sequence.19': [(<numba.core.ir.Assign object at 0x000001E372AB0B20>,
                                        16)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001E372A7FA90>,
                                  0)],
             '$60binary_floor_divide.23': [(<numba.core.ir.Assign object at 0x000001E372AB2940>,
                                            16)],
             '$66binary_floor_divide.26': [(<numba.core.ir.Assign object at 0x000001E372AB2D00>,
                                            16)],
             '$68build_tuple.27': [(<numba.core.ir.Assign object at 0x000001E372AB2E80>,
                                    16)],
             '$72binary_subscr.30': [(<numba.core.ir.Assign object at 0x000001E372AB5220>,
                                      16)],
             '$78binary_add.33': [(<numba.core.ir.Assign object at 0x000001E372AB55E0>,
                                   16)],
             '$80inplace_add.34': [(<numba.core.ir.Assign object at 0x000001E372AB5760>,
                                    16)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001E372A7FD90>,
                                    0)],
             '$90return_value.1': [(<numba.core.ir.Assign object at 0x000001E372AAB820>,
                                    88)],
             '$const88.0': [(<numba.core.ir.Assign object at 0x000001E372AB2790>,
                             88)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001E372A7FC40>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001E372AAB2E0>,
                           14)],
             'i': [(<numba.core.ir.Assign object at 0x000001E372AAB8B0>, 16)],
             'out': [(<numba.core.ir.Assign object at 0x000001E372A7F7F0>, 0)],
             'p': [(<numba.core.ir.Assign object at 0x000001E372AB2430>, 16)],
             'polarity_offset': [(<numba.core.ir.Assign object at 0x000001E372A7F370>,
                                  0)],
             'ps': [(<numba.core.ir.Assign object at 0x000001E372A79BE0>, 0)],
             'resolution_level': [(<numba.core.ir.Assign object at 0x000001E372A7F5B0>,
                                   0)],
             't': [(<numba.core.ir.Assign object at 0x000001E372AB2310>, 16)],
             'ts': [(<numba.core.ir.Assign object at 0x000001E372A79A30>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x000001E372AB20D0>, 16)],
             'xs': [(<numba.core.ir.Assign object at 0x000001E372A79610>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000001E372AB21F0>, 16)],
             'ys': [(<numba.core.ir.Assign object at 0x000001E372A79D90>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x000001E372A6BE50>
INFO:data.utils.data_loader_split:Split train, # views: 1001, # effective views: 900
INFO:data.utils.data_loader_split:raw intrinsics_files: 1001
INFO:data.utils.data_loader_split:raw pose_files: 1001
INFO:data.utils.data_loader_split:raw img_files: 1001
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=78)
           2	LOAD_GLOBAL(arg=0, lineno=80)
           4	LOAD_GLOBAL(arg=1, lineno=80)
           6	LOAD_FAST(arg=0, lineno=80)
           8	CALL_FUNCTION(arg=1, lineno=80)
          10	CALL_FUNCTION(arg=1, lineno=80)
          12	GET_ITER(arg=None, lineno=80)
>         14	FOR_ITER(arg=72, lineno=80)
          16	STORE_FAST(arg=7, lineno=80)
          18	LOAD_FAST(arg=0, lineno=81)
          20	LOAD_FAST(arg=7, lineno=81)
          22	BINARY_SUBSCR(arg=None, lineno=81)
          24	LOAD_FAST(arg=1, lineno=81)
          26	LOAD_FAST(arg=7, lineno=81)
          28	BINARY_SUBSCR(arg=None, lineno=81)
          30	LOAD_FAST(arg=2, lineno=81)
          32	LOAD_FAST(arg=7, lineno=81)
          34	BINARY_SUBSCR(arg=None, lineno=81)
          36	LOAD_FAST(arg=3, lineno=81)
          38	LOAD_FAST(arg=7, lineno=81)
          40	BINARY_SUBSCR(arg=None, lineno=81)
          42	BUILD_TUPLE(arg=4, lineno=81)
          44	UNPACK_SEQUENCE(arg=4, lineno=81)
          46	STORE_FAST(arg=8, lineno=81)
          48	STORE_FAST(arg=9, lineno=81)
          50	STORE_FAST(arg=10, lineno=81)
          52	STORE_FAST(arg=11, lineno=81)
          54	LOAD_FAST(arg=4, lineno=82)
          56	LOAD_FAST(arg=9, lineno=82)
          58	LOAD_FAST(arg=5, lineno=82)
          60	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          62	LOAD_FAST(arg=8, lineno=82)
          64	LOAD_FAST(arg=5, lineno=82)
          66	BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
          68	BUILD_TUPLE(arg=2, lineno=82)
          70	DUP_TOP_TWO(arg=None, lineno=82)
          72	BINARY_SUBSCR(arg=None, lineno=82)
          74	LOAD_FAST(arg=11, lineno=82)
          76	LOAD_FAST(arg=6, lineno=82)
          78	BINARY_ADD(arg=None, lineno=82)
          80	INPLACE_ADD(arg=None, lineno=82)
          82	ROT_THREE(arg=None, lineno=82)
          84	STORE_SUBSCR(arg=None, lineno=82)
          86	JUMP_ABSOLUTE(arg=14, lineno=82)
>         88	LOAD_CONST(arg=0, lineno=82)
          90	RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=0 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=78)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$xs6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=80)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=80)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=14 nstack_initial=1)
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=72, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=88 nstack_initial=0)
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=0, lineno=82)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$const88.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:state.pc_initial: State(pc_initial=16 nstack_initial=2)
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=7, lineno=80)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$xs18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$ys24.5', '$i26.6']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$ts30.8', '$i32.9']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$ps36.11', '$i38.12']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BUILD_TUPLE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=UNPACK_SEQUENCE(arg=4, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$42build_tuple.14']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=8, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16', '$44unpack_sequence.15']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=9, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17', '$44unpack_sequence.16']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=10, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18', '$44unpack_sequence.17']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=11, lineno=81)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$44unpack_sequence.18']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=9, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$y56.21', '$resolution_level58.22']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=8, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$x62.24', '$resolution_level64.25']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_TUPLE(arg=2, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$60binary_floor_divide.23', '$66binary_floor_divide.26']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=DUP_TOP_TWO(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$70dup_top_two.28', '$70dup_top_two.29']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=11, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$p74.31', '$polarity_offset76.32']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=INPLACE_ADD(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$72binary_subscr.30', '$78binary_add.33']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=ROT_THREE(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$out54.20', '$68build_tuple.27', '$80inplace_add.34']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$80inplace_add.34', '$out54.20', '$68build_tuple.27']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=JUMP_ABSOLUTE(arg=14, lineno=82)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$xs6.2'}), (8, {'func': '$4load_global.1', 'args': ['$xs6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$xs18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$xs18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$ys24.5'}), (26, {'res': '$i26.6'}), (28, {'index': '$i26.6', 'target': '$ys24.5', 'res': '$28binary_subscr.7'}), (30, {'res': '$ts30.8'}), (32, {'res': '$i32.9'}), (34, {'index': '$i32.9', 'target': '$ts30.8', 'res': '$34binary_subscr.10'}), (36, {'res': '$ps36.11'}), (38, {'res': '$i38.12'}), (40, {'index': '$i38.12', 'target': '$ps36.11', 'res': '$40binary_subscr.13'}), (42, {'items': ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13'], 'res': '$42build_tuple.14'}), (44, {'iterable': '$42build_tuple.14', 'stores': ['$44unpack_sequence.15', '$44unpack_sequence.16', '$44unpack_sequence.17', '$44unpack_sequence.18'], 'tupleobj': '$44unpack_sequence.19'}), (46, {'value': '$44unpack_sequence.15'}), (48, {'value': '$44unpack_sequence.16'}), (50, {'value': '$44unpack_sequence.17'}), (52, {'value': '$44unpack_sequence.18'}), (54, {'res': '$out54.20'}), (56, {'res': '$y56.21'}), (58, {'res': '$resolution_level58.22'}), (60, {'lhs': '$y56.21', 'rhs': '$resolution_level58.22', 'res': '$60binary_floor_divide.23'}), (62, {'res': '$x62.24'}), (64, {'res': '$resolution_level64.25'}), (66, {'lhs': '$x62.24', 'rhs': '$resolution_level64.25', 'res': '$66binary_floor_divide.26'}), (68, {'items': ['$60binary_floor_divide.23', '$66binary_floor_divide.26'], 'res': '$68build_tuple.27'}), (70, {'orig': ['$out54.20', '$68build_tuple.27'], 'duped': ['$70dup_top_two.28', '$70dup_top_two.29']}), (72, {'index': '$70dup_top_two.29', 'target': '$70dup_top_two.28', 'res': '$72binary_subscr.30'}), (74, {'res': '$p74.31'}), (76, {'res': '$polarity_offset76.32'}), (78, {'lhs': '$p74.31', 'rhs': '$polarity_offset76.32', 'res': '$78binary_add.33'}), (80, {'lhs': '$72binary_subscr.30', 'rhs': '$78binary_add.33', 'res': '$80inplace_add.34'}), (84, {'target': '$out54.20', 'index': '$68build_tuple.27', 'value': '$80inplace_add.34'}), (86, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$const88.0'}), (90, {'retval': '$const88.0', 'castval': '$90return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    xs = arg(0, name=xs)                     ['xs']
    ys = arg(1, name=ys)                     ['ys']
    ts = arg(2, name=ts)                     ['ts']
    ps = arg(3, name=ps)                     ['ps']
    out = arg(4, name=out)                   ['out']
    resolution_level = arg(5, name=resolution_level) ['resolution_level']
    polarity_offset = arg(6, name=polarity_offset) ['polarity_offset']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'xs']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 88             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'xs']
    $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>) ['$28binary_subscr.7', 'i', 'ys']
    $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>) ['$34binary_subscr.10', 'i', 'ts']
    $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>) ['$40binary_subscr.13', 'i', 'ps']
    $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)]) ['$22binary_subscr.4', '$28binary_subscr.7', '$34binary_subscr.10', '$40binary_subscr.13', '$42build_tuple.14']
    $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4) ['$42build_tuple.14', '$44unpack_sequence.19']
    $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.15', '$44unpack_sequence.19']
    $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.16', '$44unpack_sequence.19']
    $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.17', '$44unpack_sequence.19']
    $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.18', '$44unpack_sequence.19']
    x = $44unpack_sequence.15                ['$44unpack_sequence.15', 'x']
    y = $44unpack_sequence.16                ['$44unpack_sequence.16', 'y']
    t = $44unpack_sequence.17                ['$44unpack_sequence.17', 't']
    p = $44unpack_sequence.18                ['$44unpack_sequence.18', 'p']
    $60binary_floor_divide.23 = y // resolution_level ['$60binary_floor_divide.23', 'resolution_level', 'y']
    $66binary_floor_divide.26 = x // resolution_level ['$66binary_floor_divide.26', 'resolution_level', 'x']
    $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)]) ['$60binary_floor_divide.23', '$66binary_floor_divide.26', '$68build_tuple.27']
    $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>) ['$68build_tuple.27', '$72binary_subscr.30', 'out']
    $78binary_add.33 = p + polarity_offset   ['$78binary_add.33', 'p', 'polarity_offset']
    $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined) ['$72binary_subscr.30', '$78binary_add.33', '$80inplace_add.34']
    out[$68build_tuple.27] = $80inplace_add.34 ['$68build_tuple.27', '$80inplace_add.34', 'out']
    jump 14                                  []
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000002D758D1BE50>
DEBUG:numba.core.ssa:on stmt: xs = arg(0, name=xs)
DEBUG:numba.core.ssa:on stmt: ys = arg(1, name=ys)
DEBUG:numba.core.ssa:on stmt: ts = arg(2, name=ts)
DEBUG:numba.core.ssa:on stmt: ps = arg(3, name=ps)
DEBUG:numba.core.ssa:on stmt: out = arg(4, name=out)
DEBUG:numba.core.ssa:on stmt: resolution_level = arg(5, name=resolution_level)
DEBUG:numba.core.ssa:on stmt: polarity_offset = arg(6, name=polarity_offset)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(xs, func=$4load_global.1, args=[Var(xs, module_3dgs_sample_ray_split.py:78)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, module_3dgs_sample_ray_split.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000002D758D1BE50>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 88
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000002D758D1BE50>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=xs, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.7 = getitem(value=ys, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $34binary_subscr.10 = getitem(value=ts, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.13 = getitem(value=ps, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42build_tuple.14 = build_tuple(items=[Var($22binary_subscr.4, module_3dgs_sample_ray_split.py:81), Var($28binary_subscr.7, module_3dgs_sample_ray_split.py:81), Var($34binary_subscr.10, module_3dgs_sample_ray_split.py:81), Var($40binary_subscr.13, module_3dgs_sample_ray_split.py:81)])
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.19 = exhaust_iter(value=$42build_tuple.14, count=4)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.15 = static_getitem(value=$44unpack_sequence.19, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.16 = static_getitem(value=$44unpack_sequence.19, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.17 = static_getitem(value=$44unpack_sequence.19, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $44unpack_sequence.18 = static_getitem(value=$44unpack_sequence.19, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: x = $44unpack_sequence.15
DEBUG:numba.core.ssa:on stmt: y = $44unpack_sequence.16
DEBUG:numba.core.ssa:on stmt: t = $44unpack_sequence.17
DEBUG:numba.core.ssa:on stmt: p = $44unpack_sequence.18
DEBUG:numba.core.ssa:on stmt: $60binary_floor_divide.23 = y // resolution_level
DEBUG:numba.core.ssa:on stmt: $66binary_floor_divide.26 = x // resolution_level
DEBUG:numba.core.ssa:on stmt: $68build_tuple.27 = build_tuple(items=[Var($60binary_floor_divide.23, module_3dgs_sample_ray_split.py:82), Var($66binary_floor_divide.26, module_3dgs_sample_ray_split.py:82)])
DEBUG:numba.core.ssa:on stmt: $72binary_subscr.30 = getitem(value=out, index=$68build_tuple.27, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $78binary_add.33 = p + polarity_offset
DEBUG:numba.core.ssa:on stmt: $80inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$72binary_subscr.30, rhs=$78binary_add.33, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: out[$68build_tuple.27] = $80inplace_add.34
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 88
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000002D758D1BE50>
DEBUG:numba.core.ssa:on stmt: $const88.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $90return_value.1 = cast(value=$const88.0)
DEBUG:numba.core.ssa:on stmt: return $90return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000002D758D2FF40>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000002D758D5A0A0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000002D758D5A3D0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000002D758D5A4F0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000002D758D5A610>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000002D758D5ACD0>,
                                     16)],
             '$28binary_subscr.7': [(<numba.core.ir.Assign object at 0x000002D758D5F0D0>,
                                     16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002D758D2F040>,
                                  0)],
             '$34binary_subscr.10': [(<numba.core.ir.Assign object at 0x000002D758D5F490>,
                                      16)],
             '$40binary_subscr.13': [(<numba.core.ir.Assign object at 0x000002D758D5F850>,
                                      16)],
             '$42build_tuple.14': [(<numba.core.ir.Assign object at 0x000002D758D5F9D0>,
                                    16)],
             '$44unpack_sequence.15': [(<numba.core.ir.Assign object at 0x000002D758D5FCA0>,
                                        16)],
             '$44unpack_sequence.16': [(<numba.core.ir.Assign object at 0x000002D758D5FDC0>,
                                        16)],
             '$44unpack_sequence.17': [(<numba.core.ir.Assign object at 0x000002D758D5FEE0>,
                                        16)],
             '$44unpack_sequence.18': [(<numba.core.ir.Assign object at 0x000002D758D62040>,
                                        16)],
             '$44unpack_sequence.19': [(<numba.core.ir.Assign object at 0x000002D758D5FB50>,
                                        16)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000002D758D2FAC0>,
                                  0)],
             '$60binary_floor_divide.23': [(<numba.core.ir.Assign object at 0x000002D758D62970>,
                                            16)],
             '$66binary_floor_divide.26': [(<numba.core.ir.Assign object at 0x000002D758D62D30>,
                                            16)],
             '$68build_tuple.27': [(<numba.core.ir.Assign object at 0x000002D758D62EB0>,
                                    16)],
             '$72binary_subscr.30': [(<numba.core.ir.Assign object at 0x000002D758D65250>,
                                      16)],
             '$78binary_add.33': [(<numba.core.ir.Assign object at 0x000002D758D65610>,
                                   16)],
             '$80inplace_add.34': [(<numba.core.ir.Assign object at 0x000002D758D65790>,
                                    16)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000002D758D2FDC0>,
                                    0)],
             '$90return_value.1': [(<numba.core.ir.Assign object at 0x000002D758D5AA00>,
                                    88)],
             '$const88.0': [(<numba.core.ir.Assign object at 0x000002D758D627C0>,
                             88)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000002D758D2FC70>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000002D758D5A310>,
                           14)],
             'i': [(<numba.core.ir.Assign object at 0x000002D758D5A8E0>, 16)],
             'out': [(<numba.core.ir.Assign object at 0x000002D758D2F7C0>, 0)],
             'p': [(<numba.core.ir.Assign object at 0x000002D758D62460>, 16)],
             'polarity_offset': [(<numba.core.ir.Assign object at 0x000002D758D2F340>,
                                  0)],
             'ps': [(<numba.core.ir.Assign object at 0x000002D758D29220>, 0)],
             'resolution_level': [(<numba.core.ir.Assign object at 0x000002D758D2F580>,
                                   0)],
             't': [(<numba.core.ir.Assign object at 0x000002D758D62340>, 16)],
             'ts': [(<numba.core.ir.Assign object at 0x000002D758D29A90>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x000002D758D62100>, 16)],
             'xs': [(<numba.core.ir.Assign object at 0x000002D758D29640>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000002D758D62220>, 16)],
             'ys': [(<numba.core.ir.Assign object at 0x000002D758D29D60>, 0)]})
DEBUG:numba.core.ssa:SSA violators <numba.core.utils.OrderedSet object at 0x000002D758D1BE50>
INFO:data.utils.data_loader_split:Split train, # views: 1001, # effective views: 1001
